Assignment name  : micro_paint
Expected files   : *.c *.h
Allowed functions: fopen, fread, fscanf, fclose, write, malloc, calloc, realloc, free, memset, powf, sqrtf
--------------------------------------------------------------------------------------

Write a program that will read an "operation file" and print the result in the terminal

Your program must take one argument, it will be the path to the "operation file"
If 0 or more than 1 argument is given to your program write "Error: argument" followed by a \n in STDOUT

$> ./micro_paint | cat -e
Error: argument$
$> ./micro_paint do not fear mathematics | cat -e
Error: argument$
$> 

If any problem occurs while you open and/or read the "operation file" write "Error: Operation file corrupted" followed by a \n in STDOUT

The "operation file" will contains lines with one operation per line
If a line is incorrect an error occurs.
If an error has occured your program must return 1
If no error has occured it must return 0
The last line can be with or without a \n
The lines must be read in order and therefore operations must be executed in the same order
There must be at least one space between each variable in a line

WIDTH HEIGHT BACKGROUND_CHAR
This line is always the first line of the file and it defines the zone where to draw_char. Your program should not display anything outside the draw_char zone. It must be there only once.
- WIDTH: must be a int with 0 < WIDTH <= 300, the horizontal number of characters to use for the draw_char zone
- HEIGHT: must be a int with 0 < HEIGHT <= 300, the vertical number of characters to use for the draw_char zone
- BACKGROUND_CHAR: any empty space will be filled with BACKGROUND_CHAR

r ltX ltY WIDTH HEIGHT CHAR
This operation will draw_char an empty rectangle, where only the border of the rectangle is drawn
- r: the character r
- ltX: any float, the horizontal position of the top left corner of the rectangle
- ltY: any float, the vertical position of the top left corner of the rectangle
- WIDTH: a positive float but not 0, the width of the rectangle (horizontal)
- HEIGHT: a positive float but not 0, the height of the rectangle (vertical)
- CHAR: the char use to draw_char the rectangle

R ltX ltY WIDTH HEIGHT CHAR
This operation will draw_char a filled rectangle
- R: the character R
- ltX: any float, the horizontal position of the top left corner of the rectangle
- ltY: any float, the vertical position of the top left corner of the rectangle
- WIDTH: a positive float but not 0, the width of the rectangle (horizontal)
- HEIGHT: a positive float but not 0, the height of the rectangle (vertical)
- CHAR: the char use to draw_char the rectangle

The draw_char zone is divided in rectangles that can contain one character each (because we are in a terminal...), we will call them pixel
To make everything easier, we will use only the top left corner of the pixel to know if that pixel is in a rectangle or not
A pixel with a top left corner with a distance bigger or equal than 1 from the border of a rectangle is not part of an empty rectangle 
A pixel with a top left corner with a distance lower than 1 from the border of a rectangle is part of an empty rectangle.

You should look at the image while reading the next few lines. It represents a terminal. We've set a draw_char zone of WIDTH 5 and HEIGHT 3.
We've wrote different character to help you understand the following explanations.
- If you want to draw_char the operation: r 2.5 1.5 1 1 ltX (the green rectangle)
-- it means that the character 'D' in the image will be replaced by 'ltX'

You should find our_micro_paint to help you test yours with some operation_file.example

Hint:
If a point is defined as (Xa, Ya)
And a rectangle with a top left corner (Xtl, Ytl) and a bottom right corner (Xbr, Ybr)
If Xtl <= Xa <= Xbr and Ytl <= Ya <= Ybr then the point is in the rectangle
